import net.masterthought.cucumber.ReportBuilder

group 'salesforce.com'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:0.1.0'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.7.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'net.sourceforge.jexcelapi', name: 'jxl', version: '2.6.12'
    compile group: 'jcifs', name: 'jcifs', version: '1.3.17'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.6'
    compile group: 'com.nativelibs4java', name: 'bridj', version: '0.7.0'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '1.7.2'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
}

tasks.withType(Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()

    testLogging.showStandardStreams = true

    // set JVM arguments for the features.test JVM(s)
    scanForTestClasses = false
    ignoreFailures = true

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    // Define the custom properties to run the regression
    systemProperty "browser", browser
    systemProperty "envId", envId
    systemProperty "skin", skin
}

def String splitFeatureFolders(String featureFolders) {
    def featureBasePath = 'classpath:'
    String[] listFeatureFolders = featureFolders.split(',')
    StringBuilder listFeaturesPath = new StringBuilder();
    listFeatureFolders.each { String item -> listFeaturesPath.append(featureBasePath + item.trim() + ' ') }
    return listFeaturesPath.toString()
}

task executeFeatures(type: Test) {
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue salesforce ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumber.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
//                           'classpath:' + featureFolders + ' ' +
                           splitFeatureFolders(featureFolders) + ' ' +
                           cucumberOptions]
    }

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}
/*

def generateReport(String pathCucumber, String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)

    List<String> jsonFiles = new ArrayList<>()
    jsonFiles.add(pathCucumber)

    String buildNumber = "1"
    String projectName = "cucumber-report"
    boolean runWithJenkins = false
    boolean parallelTesting = false

    net.masterthought.cucumber.Configuration configuration = new net.masterthought.cucumber.Configuration(reportOutputDirectory, projectName)
    // optional configuration
    configuration.setParallelTesting(parallelTesting)
    configuration.setRunWithJenkins(runWithJenkins)
    configuration.setBuildNumber(buildNumber)

    ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration)
    reportBuilder.generateReports()
}*/

//Code for 0.1.0 report
def generateReport(String pathCucumber, String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)

    String buildNumber = "1"
    String buildProjectName = "cucumber-report"
    String pluginUrlPath = ""
    boolean skippedFails = true
    boolean pendingFails = true
    boolean undefinedFails = true
    boolean missingFails = true
    boolean flashCharts = true
    boolean runWithJenkins = false
    boolean artifactsEnabled = false
    String artifactConfig = ""
    boolean highCharts = true
    boolean parallelTesting = false

    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, reportOutputDirectory,
            pluginUrlPath, buildNumber, buildProjectName, skippedFails, pendingFails,
            undefinedFails, missingFails, flashCharts, runWithJenkins, artifactsEnabled,
            artifactConfig, highCharts, parallelTesting)
    reportBuilder.generateReports()
}

task reExecuteFeatures(type: Test) {

    //Define file name to store the build number and the execution status
    systemProperty "build.properties", 'buildRetry.properties'

    File failedScenariosFile = new File('build/cucumber/rerun.txt')
    if (failedScenariosFile.exists() && !failedScenariosFile.getText().isEmpty()) {
        options {
            useDefaultListeners = false
            jvmArgs = ['-Dcucumber.options=@build/cucumber/rerun.txt ' +
                               '--glue com.northplains.tsweb ' +
                               '--plugin pretty ' +
                               '--plugin json:build/cucumber/retry/cucumber.json ' +
                               '--plugin rerun:build/cucumber/retry/rerun.txt ' +
                               cucumberOptions]
        }
    }

    doLast {
        generateReport('build/cucumber/retry/cucumber.json', 'build/cucumber/retry/reports')
    }
}